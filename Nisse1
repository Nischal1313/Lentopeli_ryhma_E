from geopy.distance import geodesic as GD
import mysql.connector
import sys

# Eurooppa (km)
prague_berlin = 256
berlin_firenze = 964
firenze_reykjavik = 3070
reykjavik_barcelona = 2974

# Afrikka (km)
lagos_capetown = 4767
capetown_burundi = 3569
burundi_freetown = 4899
freetown_cairo = 5209

# Aasia (km)
calutta_kathmandu = 639
kathmandu_doha = 3365
doha_kualalumpur = 5910
kualalumpur_seoul = 4601

# Amerikka (km)
havanna_santiago = 6360
santiogo_lasvegas = 8969
lasvegas_riodejaneiro = 9975
riodejaneiro_quebec = 8211


yhteys = mysql.connector.connect(
    host="localhost",
    port=3306,
    database="karkuteilla_database",
    user="root",
    password="METROPOLIA13",
    autocommit=True,
)

def plane_art():
    return print(
        """
      ``+*:.
      =@@@@#.
       +@@@@@@..          .-:.
        :@@@@@@%:   .%@=..*@@@:.
         .*@@@@@@@:::#@@@**#@@@@@@@@@:.
           :@@@@@@@@@@@@@@@@@@@@@@@@#-.
            .-@@@@@@@@@@@@@@@@@=...
             .%@@@@@@@@@%#.
           :@@@@@@@@@@@@@:
           :%@@@@@@@@@@@@@#.
            .:@@@@@#.%@@@@@@+
          .@#.@@@@@:   #@@@@@@.
          :@@@@@@@+     .#@@@@@@@@@@@@*.
           .=@@@@@.       .+@@@@@@@#=..
             -@@@=         .@@@@@@.
             +@@#          .@@@--@@.
             #@@-          .@@+.
             .:+           .%@. """
    )


def suoritaHaku(sql):
    kursori = yhteys.cursor()
    kursori.execute(sql)
    tulos = kursori.fetchall()
    return tulos


def vaikeustasojamanner():
    while True:
        difficulty_level = input(
            str("Haluatko pelata pelin helpolla(1) vai vaikealla(2) vaikeustasolla? ")
        )
        if difficulty_level == "1" or difficulty_level == "2":
            break
    if difficulty_level == "1":
        while True:
            easy_level = input(
                "Valitse vaikeustason manner: Eurooppa(1) tai Amerikat(2): "
            )
            if easy_level == "1" or "2":
                break

        if easy_level == "1":
            print("Olet valinnut Euroopan.")
            print(plane_art())
            print(
                "Olet saapunut Tśekkiin, tervetuloa Prahan kansainväliseen lentokenttään!"
            )

        if easy_level == "2":
            print("Olet valinnut Amerikat.")
            print(plane_art())
            print(
                "Olet saapunut Cuubaan, tervetuloa Havannan kansainväliseen lentokenttään!"
            )

    if difficulty_level == "2":
        while True:
            easy_level = input("Valitse vaikeustason manner: Aasia(3) tai Afrikka(4): ")
            if easy_level == "3" or "4":
                break

        if easy_level == "3":
            print("Olet valinnut Aasian.")
            print(plane_art())
            print(
                "Olet saapunut Kalkuttaan, tervetuloa Kolkatan kansainväliseen lentokenttään!"
            )

        if easy_level == "4":
            print("Olet valinnut Afrikka.")
            print(plane_art())
            print(
                "Olet saapunut Nigeriaan, tervetuloa Murtala Muhammedin kansainväliseen lentokenttään!"
            )
            return easy_level


def get_first_tip():
    sql = "Select tip_1, From airport "
    sql += " where name = '" + airport_name + "'"
    tulos = suoritaHaku(sql)
    print(tulos)
    return


def youre_here():
    sql2 = "SELECT latitude_deg, longitude_deg from airport"
    sql2 += " Where name = '" + airport_name + "'"
    sijainti = suoritaHaku(sql2)
    return sijainti


def game(
    airport_name,
    correct_country_name,
    airport_name2,
    right_distance,
    coins,
    crimes_stopped,
    location_atm,
):
    get_first_tip(airport_name)

    youre_here(location_atm)

    distance = GD(sijainti2, sijainti).km
    pelaajan_kilometrit = 0
    coins = 0
    crimes_stopped = 0
    print(f"Tervetuloa {airport_name}!")
    print(pelaajan_kilometrit, coins, crimes_stopped)
    print(
        "Saamasi tiedon mukaan sinun pitäisi päättää mihin valtioon matkustat seuraavaksi."
    )
    print(
        "Mikäli tietosi perusteella et pysty valitsemaan valtiota, voimme mahdollisuuksien mukaan hankkia sinulle lisää tietoa."
    )
    player_choise = str(
        input(
            "Matkustan saamani tiedon perusteella (1), "
            "Yrittäkää kerätätä lisäätietoa rikollisen seuraavasta kohteesta.(2)"
        )
    )
    if player_choise == "1":
        next_country = input("Anna valtion nimi: ")
        if next_country == correct_country_name:
            coins += 2
            crimes_stopped += 1

    if player_choise == "2":
        coins = coins - 1
        sql = "Select tip_2, From airport "
        sql += " where name = '" + airport_name + "'"
        tulos = suoritaHaku(sql)
        print(tulos)
        next_country = input(
            f"Aika on lopussa, sinun on pakko valita seuraava kohde saamasi tietojen perusteella."
        )
        if next_country == correct_country_name:
            crimes_stopped += 1
            kierros = 1
        else:
            coins -= 1

        #Funktion pitää palauttaa pelaajan_kilometrit, jonka voi ottaa samalla fuktion parametrilla, kun right_distance
        #jos pelaaja vastaa väärin sitten voi mennä laskemaan tuon fuktion, niin sitä voisi nyt laittaa tuohon
        #if lauseeseen, joka kattoo oliko pelaajan vastus oikea vai ei


        #Meidän olisi myös hyvä kattoo, että monesko kierro pelissä on meneillään. Jos kierroksia on jo mennyt 4 ja
        #pelaaja ei ole onnistunut pysättämään 3/4 rikosta niin se olisi automaattinen game over

        #Pitäisi myös katttoo if lausekkeella, että meneekö coins nollaan ja se viesti mistä oli puhetta, että
        #tulee pomolta viesti, että seuraava taso täytyy läpäistä ilman vinkkejä tai jtn sinne päin


        # kilometrifunktio rangaistus
        if right_distance > distance:
            rangaistus = (right_distance - distance) * 2

        if distance > right_distance:
            rangaistus = (distance - right_distance) * 2


    return coins, crimes_stopped, pelaajan_kilometrit, next_country


print("Tervetuloa pelaamaan Lentäen Karkuteillä!")
plane_art()
user_name = str(input("Anna käyttäjätunnus: "))



def vanha_vai_uusi_pelaaja(user_name,):
    sql = f"Select '{user_name}', From game"
    kursori = yhteys.cursor()
    kursori.execute(sql)
    tulos = kursori.fetchone()

    if tulos is not None:
        print(f"Welcome back{user_name}")

    if tulos is None:
        print(f"Welcome {user_name} to a new game.")
        vaikeustasojamanner()
        game()

    return tulos


        # load old game


if vanha_vai_uusi_pelaaja(user_name) is not None:
    while True:
        print(
            f"Tervetuloa takaisin {user_name}! Haluatko aloittaa uuden pelin vai jatkaa vanhaa peliä?"
        )
        new_or_oldgame = input(
            "Paina 1, jos haluat aloittaa uuden pelin. Paina 2, jos haluat jatkaa vanhaa peliä: "
        )
        if new_or_oldgame == "1":
            pelaajan_taso_valinta = vaikeustasojamanner()[0]
            # Tämä antaa meille tiedon siitä mitä mannerta on valittu
            # joka antaa tietoa game funktiolle, oikeasta mantereesta.

            # Nyt voi käyttää tota pelaajan_taso_valinta muutujaa katsomaan mistä pelaaja haluaa aloittaa pelin.
            # 1 = EU, 2 = NA, 3 = Asia, 4 = Africa
            if pelaajan_taso_valinta == "1":
                game() #tähän pitää nyt latautua Euroopan

            if pelaajan_taso_valinta == "2":
                game() #Tähän latautuu Amerikat taso

            if pelaajan_taso_valinta == "3":
                game() #Tähän latautuu Aasia

            else:
                game() #Tähän latautuu Afrikka

            break
        if new_or_oldgame == "2":
            print("oho")
        #Ade kirjoittaa tähän oikean SQL lauseen. Voidaan yhdessä sitten katsoa, jatkuuko peli oikein, ja mitä sen jälkeen.

else:
    #Laitetaan uusi peli tulemaan, jos pelaajaa ei näy meidän tietokannassa.
    pelaajan_taso_valinta = vaikeustasojamanner()[0]
    # Nyt voi käyttää tota pelaajan_taso_valinta muutujaa katsomaan mistä pelaaja haluaa aloittaa pelin. 1 = EU, 2 = NA,
    # 3 = Asia, 4 = Africa
    game()





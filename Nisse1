from geopy.distance import geodesic as GD
import mysql.connector
import sys

# Eurooppa (km)
prague_berlin = 256
berlin_firenze = 964
firenze_reykjavik = 3070
reykjavik_barcelona = 2974

# game("Václav Havel Airport Prague","germany", 256, 4, 0, "prague", 0,)
# game("Berlin Brandenburg Airport","italy", 964, 4, 0, "berlin", 0,)
# game("Peretola Airport","iceland", 3070, 4, 0, "firenze", 0,)
# game("Kelavik International Airport","spain", 2974, 4, 0, "reykjavik", 0,)

# Afrikka (km)
lagos_capetown = 4767
capetown_burundi = 3569
burundi_freetown = 4899
freetown_cairo = 5209
#afrikka
# game("Murtala Muhammed International Airport","south_africa", 4767, 4, 0, "lagos", 0,)
# game("Cape Town International Airport ","bujumbura", 3569, 4, 0, "capetown", 0,)
# game("Bujumbura International Airport","sierra_leone", 4899, 4, 0, "burundi", 0,)
# game("Lungi International Airport ","egypt", 5209, 4, 0, "freetown", 0,)

# Aasia (km)
calutta_kathmandu = 639
kathmandu_doha = 3365
doha_kualalumpur = 5910
kualalumpur_seoul = 4601
# aasia
# game("Kolkata Airport", "nepal", 639, 4, 0, "calkutta", 0,)
# game("Tribhuvan International Airport", "gatar", 3365, 4, 0, "kathmandu", 0,)
# game("Hamad International Airport ","malaysia", 5910, 4, 0, "doha", 0,)
# game("Kuala Lumpur International Airport","south_korea", 4601, 4, 0, "kualalumpur", 0,)

# Amerikka (km)
havanna_santiago = 6360
santiogo_lasvegas = 8969
lasvegas_riodejaneiro = 9975
riodejaneiro_quebec = 8211

# amerikka
# game("José Marti International Airport", "chile", 6360, 4, 0, "havanna", 0,)
# game("Santiago de Chile Airport", "US", 8969, 4, 0, "santiago", 0,)
# game("McCarran International Airport","brazil", 9975, 4, 0, "lasvegas", 0,)
# game("Galeão International Airport","canada", 8211, 4, 0, "riodejaneiro", 0,)

def oikea_matka(distance):
    if eurooppa[0] > distance:
        rangaistus = (eurooppa[0] - distance) * 2
    elif distance > eurooppa[0]:
        rangaistus = (distance - eurooppa[0]) * 2
    return rangaistus

def tallennus(coins, pelaajan_kilometrit, location_atm, crimes_stopped, coin_used, user_name):
    # parametreinä kaikki arvot, jotka tulee aaltosulkeiden väliin
    sql = f"update game set coin = '{coins}', km_travelled = '{pelaajan_kilometrit}',"
    sql += f" location = '{location_atm}', crimes_stopped = '{crimes_stopped}', coin_used = '{coin_used}'"
    sql += f" where screen_name = '{user_name}'"
    suoritaKomento(sql)
    return  # ei kai tarvii palauttaa mitään? #Tätä ei ole viellä kutsuttu.


yhteys = mysql.connector.connect(
    host="localhost",
    port=3306,
    database="karkuteilla_database",
    user="root",
    password="METROPOLIA13",
    autocommit=True,
)

def plane_art():
    return print(
        """
      ``+*:.
      =@@@@#.
       +@@@@@@..          .-:.
        :@@@@@@%:   .%@=..*@@@:.
         .*@@@@@@@:::#@@@**#@@@@@@@@@:.
           :@@@@@@@@@@@@@@@@@@@@@@@@#-.
            .-@@@@@@@@@@@@@@@@@=...
             .%@@@@@@@@@%#.
           :@@@@@@@@@@@@@:
           :%@@@@@@@@@@@@@#.
            .:@@@@@#.%@@@@@@+
          .@#.@@@@@:   #@@@@@@.
          :@@@@@@@+     .#@@@@@@@@@@@@*.
           .=@@@@@.       .+@@@@@@@#=..
             -@@@=         .@@@@@@.
             +@@#          .@@@--@@.
             #@@-          .@@+.
             .:+           .%@. """
    )


def suoritaHaku(sql):
    kursori = yhteys.cursor()
    kursori.execute(sql)
    tulos = kursori.fetchall()
    return tulos


def vaikeustasojamanner():
    while True:
        print("Haluatko pelata pelin helpolla(1) vai vaikealla(2) vaikeustasolla?")
        difficulty_level = input(
            str("1: Eurooppa tai Amerikat, 2: Aasia tai Afrikka: ")
        )
        if difficulty_level == "1" or difficulty_level == "2":
            break
    if difficulty_level == "1":
        while True:
            easy_level = input(
                "Valitse vaikeustason manner: Eurooppa(1) tai Amerikat(2): "
            )
            if easy_level == "1" or "2":
                break

        if easy_level == "1":
            print("Olet valinnut Euroopan.")
            print(plane_art())
            print(
                "Olet saapunut Tśekkiin, tervetuloa Prahan kansainväliseen lentokenttään!"
            )

        if easy_level == "2":
            print("Olet valinnut Amerikat.")
            print(plane_art())
            print(
                "Olet saapunut Cuubaan, tervetuloa Havannan kansainväliseen lentokenttään!"
            )

    if difficulty_level == "2":
        while True:
            easy_level = input("Valitse vaikeustason manner: Aasia(3) tai Afrikka(4): ")
            if easy_level == "3" or "4":
                break

        if easy_level == "3":
            print("Olet valinnut Aasian.")
            print(plane_art())
            print(
                "Olet saapunut Kalkuttaan, tervetuloa Kolkatan kansainväliseen lentokenttään!"
            )

        if easy_level == "4":
            print("Olet valinnut Afrikka.")
            print(plane_art())
            print(
                "Olet saapunut Nigeriaan, tervetuloa Murtala Muhammedin kansainväliseen lentokenttään!"
            )
    return easy_level


def get_first_tip(airport_name):
    sql = "Select tip_1, From airport "
    sql += f" where name = '{airport_name}'"
    tulos = suoritaHaku(sql)
    print(tulos)
    return


def youre_here(airport_name):
    sql2 = "SELECT latitude_deg, longitude_deg from airport"
    sql2 += " Where name = '{airport_name}'"
    sijainti = suoritaHaku(sql2)
    return sijainti


def game(
    airport_name,
    correct_country_name,
    right_distance,
    coins,
    crimes_stopped,
    location_atm,
    coin_used,
):
    pelaajan_kilometrit = 0
    coins = 0
    crimes_stopped = 0
    get_first_tip(airport_name)

    print(
        f"Sinun stats KM: {pelaajan_kilometrit}, HETACOINS: {coins}, Rikokset pysäytetty {crimes_stopped}"
    )
    print(
        "Saamasi tiedon mukaan sinun pitäisi päättää mihin valtioon matkustat seuraavaksi."
    )
    print(
        "Mikäli tietosi perusteella et pysty valitsemaan valtiota, voimme mahdollisuuksien mukaan hankkia sinulle lisää tietoa."
    )
    player_choise = str(
        input(
            "Matkustan saamani tiedon perusteella (1), "
            "Yrittäkää kerätätä lisäätietoa rikollisen seuraavasta kohteesta.(2)"
        )
    )
    if player_choise == "1":
        next_country = input("Anna valtion nimi: ")
        if next_country == correct_country_name:
            coins += 2
            crimes_stopped += 1
        sijainti1 = youre_here(f"{airport_name}")
        sijainti2 = youre_going(f"{next_country}")

        distance = GD(sijainti1, sijainti2).km
        print(distance)
        # Onko tällä enään tarkoitusta vai ei, jos on eikö tää pitäs olla alhaalla, kun saadaan tieto
        # minne pelaaja haluaa matkustaa ).km

    if player_choise == "2":
        coins = coins - 1
        sql = "Select tip_2 From airport "
        sql += f" where name = '{airport_name}'"
        tulos = suoritaHaku(sql)
        print(tulos)
        next_country = input(
            f"Aika on lopussa, sinun on pakko valita seuraava kohde saamasi tietojen perusteella."
        )
        if next_country == correct_country_name:
            crimes_stopped += 1
            kierros = 1
            sijainti1 = youre_here(f"{airport_name}")
            sijainti2 = youre_going(f"{next_country}")

            distance = GD(sijainti1, sijainti2).km
            print(round(distance))

            print(distance)
            # Onko tällä enään tarkoitusta vai ei, jos on eikö tää pitäs olla alhaalla, kun saadaan tieto
            # minne pelaaja haluaa matkustaa ).km
        else:
            coins -= 1

        # Funktion pitää palauttaa pelaajan_kilometrit, jonka voi ottaa samalla fuktion parametrilla, kun right_distance
        # jos pelaaja vastaa väärin sitten voi mennä laskemaan tuon fuktion, niin sitä voisi nyt laittaa tuohon
        # if lauseeseen, joka kattoo oliko pelaajan vastus oikea vai ei

        # Meidän olisi myös hyvä kattoo, että monesko kierro pelissä on meneillään. Jos kierroksia on jo mennyt 4 ja
        # pelaaja ei ole onnistunut pysättämään 3/4 rikosta niin se olisi automaattinen game over

        # Pitäisi myös katttoo if lausekkeella, että meneekö coins nollaan ja se viesti mistä oli puhetta, että
        # tulee pomolta viesti, että seuraava taso täytyy läpäistä ilman vinkkejä tai jtn sinne päin

        # kilometrifunktio rangaistus
        if right_distance > distance:
            rangaistus = (right_distance - distance) * 2
            pelaajan_kilometrit = rangaistus

        if distance > right_distance:
            rangaistus = (distance - right_distance) * 2
            pelaajan_kilometrit = rangaistus

    return coins, crimes_stopped, pelaajan_kilometrit, next_country, coin_used


print("Tervetuloa pelaamaan Lentäen Karkuteillä!")
plane_art()
user_name = str(input("Anna käyttäjätunnus: "))



def vanha_vai_uusi_pelaaja(user_name,):
    sql = f"Select screen_name From game where screen_name = '{user_name}'"
    kursori = yhteys.cursor()
    kursori.execute(sql)
    tulos = kursori.fetchone()

    if tulos is not None:
        print(f"Tervetuloa takaisin {user_name}!")

    if tulos is None:
        print(f"Tervetuloa {user_name} uuteen peliin")
#Tähän tulee Hetan kirjoittama intro
        pelaajan_taso_valinta = vaikeustasojamanner()[0] #Koodi kaattuu tähän
        # Nyt voi käyttää tota pelaajan_taso_valinta muutujaa katsomaan mistä pelaaja haluaa aloittaa pelin.
        # 1 = EU, 2 = NA, 3 = Asia, 4 = Africa
        if pelaajan_taso_valinta == "1":
            game()  # tähän pitää nyt latautua Euroopan
        
        if pelaajan_taso_valinta == "2":
            game()  # Tähän latautuu Amerikat taso
        
        if pelaajan_taso_valinta == "3":
            game()  # Tähän latautuu Aasia
        
        else:
            game()  # Tähän latautuu Afrikka



        # load old game


if vanha_vai_uusi_pelaaja(user_name) is not None: #KOODI KAATUU TÄHÄN
    while True:
        print(
            f"Tervetuloa takaisin {user_name}! Haluatko aloittaa uuden pelin vai jatkaa vanhaa peliä?"
        )
        new_or_oldgame = input(
            "Paina 1, jos haluat aloittaa uuden pelin. Paina 2, jos haluat jatkaa vanhaa peliä: "
        )
        if new_or_oldgame == "1":
            pelaajan_taso_valinta = vaikeustasojamanner()[0]
            # Tämä antaa meille tiedon siitä mitä mannerta on valittu
            # joka antaa tietoa game funktiolle, oikeasta mantereesta.

            # Nyt voi käyttää tota pelaajan_taso_valinta muutujaa katsomaan mistä pelaaja haluaa aloittaa pelin.
            # 1 = EU, 2 = NA, 3 = Asia, 4 = Africa
            if pelaajan_taso_valinta == "1":
                game() #tähän pitää nyt latautua Euroopan

            if pelaajan_taso_valinta == "2":
                game() #Tähän latautuu Amerikat taso

            if pelaajan_taso_valinta == "3":
                game() #Tähän latautuu Aasia

            else:
                game() #Tähän latautuu Afrikka

            break
        if new_or_oldgame == "2":
            print("oho")
        #Ade kirjoittaa tähän oikean SQL lauseen. Voidaan yhdessä sitten katsoa, jatkuuko peli oikein, ja mitä sen jälkeen.

else:
    #Laitetaan uusi peli tulemaan, jos pelaajaa ei näy meidän tietokannassa.
    pelaajan_taso_valinta = vaikeustasojamanner()[0]
    # Nyt voi käyttää tota pelaajan_taso_valinta muutujaa katsomaan mistä pelaaja haluaa aloittaa pelin. 1 = EU, 2 = NA,
    # 3 = Asia, 4 = Africa
    game()




